package JavaKarel.runtime;

/*Generated by MPS */

import cz.dsllp.gui.api.service.GuiService;
import cz.dsllp.gui.api.message.Step;
import cz.dsllp.gui.api.message.Result;
import java.rmi.RemoteException;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class RobotGuiImpl implements RobotGui {
  private static final RobotGuiImpl instance = new RobotGuiImpl();
  private String robotName = "Karel";

  private RobotGuiImpl() {
  }

  public static RobotGuiImpl getInstance() {
    return instance;
  }

  private GuiService guiService;


  public void setGuiService(GuiService guiService) {
    this.guiService = guiService;
  }

  public void goToPosition(int row, int col) {
    Step step = ViewFactory.goToPosition(robotName, row, col);
    Result result = doStep(step);
    processResult(result);

  }
  public void printMessage(String message) {
    Step step = ViewFactory.printMessage(message);
    Result result = doStep(step);
    processResult(result);

  }
  public void setMarks(int row, int col, int count) {
    Step step = ViewFactory.setMarks(row, col, count);
    Result result = doStep(step);
    processResult(result);
  }
  public void showAlert(String message) {
    Step step = ViewFactory.showAlert(message);
    Result result = doStep(step);
    processResult(result);
  }
  public void turnTo(Direction direction) {
    Step step = ViewFactory.turnTo(robotName, direction);
    Result result = doStep(step);
    processResult(result);
  }

  public void createWorld(World world) throws RemoteException {
    robotName = world.getRobot().getName();
    guiService.createWorld(world.getName(), world.getWidth(), world.getHeight());
    guiService.createThing(robotName);

    Step step = ViewFactory.createWorld(world);
    Result result = doStep(step);
    processResult(result);

    world.getRobot().setGui(this);
  }

  private Result doStep(Step step) {
    try {
      return guiService.doStep(step);
    } catch (RemoteException re) {
      if (LOG.isEnabledFor(Level.WARN)) {
        LOG.warn("Comunication with GUI panel failed", re);
      }
      // TODO handle properly RemoteException 
      return null;
    }
  }

  private void processResult(Result result) {
    // TODO: handle properly result processing 
    switch (result.getStatus()) {
      case SUCCESS:
        break;
      case RESET:
        if (LOG.isInfoEnabled()) {
          LOG.info("Status reset");
        }
        break;
      case ERROR:
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Status error");
        }
      default:
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error(String.format("Unknown result status: %s", result.getStatus()));
        }
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Unknown result status ");
        }
    }
  }

  protected static Logger LOG = LogManager.getLogger(RobotGuiImpl.class);
}
