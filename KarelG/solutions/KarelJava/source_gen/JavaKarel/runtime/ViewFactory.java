package JavaKarel.runtime;

/*Generated by MPS */

import java.util.Map;
import cz.dsllp.gui.api.message.appearance.Appearance;
import java.util.HashMap;
import cz.dsllp.gui.api.message.appearance.TextAppearance;
import java.awt.Color;
import cz.dsllp.gui.api.message.Step;
import cz.dsllp.gui.api.message.Speed;
import cz.dsllp.gui.api.message.command.Position;
import cz.dsllp.gui.api.message.command.ChangeCell;
import cz.dsllp.gui.api.message.command.ChangeThing;
import cz.dsllp.gui.api.message.command.Alert;
import cz.dsllp.gui.api.message.command.PrintMessage;
import cz.dsllp.gui.api.message.command.Command;

public class ViewFactory {

  private static final Map<Direction, Appearance> ROBOT = new HashMap<Direction, Appearance>();
  private static final Appearance WALL = new TextAppearance(Color.RED, null, null);
  private static final Appearance EMPTY = new TextAppearance(Color.WHITE, null, null);


  static {
    ROBOT.put(Direction.north, createRobotAppearance("\u1403"));
    ROBOT.put(Direction.east, createRobotAppearance("\u1405"));
    ROBOT.put(Direction.south, createRobotAppearance("\u1401"));
    ROBOT.put(Direction.west, createRobotAppearance("\u1405"));
  }


  public static Step createWorld(World world) {
    Step step = new Step(Speed.INSTANT);

    for (int row = 0; row < world.getWidth(); row++) {
      for (int col = 0; col < world.getHeight(); col++) {
        Cell cell = world.getCell(row, col);
        Position p = new Position(row, col);
        Appearance a = EMPTY;
        if (cell.isWall()) {
          a = WALL;
        } else {
          if (!(cell.isEmpty())) {
            a = createMarksAppearance(cell.getMarks());
          }
        }

        step.add(new ChangeCell(p, a));

        if (cell.isRobot()) {
          step.add(new ChangeThing(cell.getRobot().getName(), p, ROBOT.get(Direction.east)));
        }
      }
    }

    return step;

  }

  public static Step initRobot(String name, int row, int col, Direction direction) {
    ChangeThing cmd = new ChangeThing(name, new Position(row, col), ROBOT.get(direction));
    return createStep(Speed.INSTANT, cmd);
  }

  public static Step goToPosition(String name, int row, int col) {
    ChangeThing cmd = new ChangeThing(name, new Position(row, col));
    return createStep(Speed.MEDIUM, cmd);
  }
  public static Step turnTo(String name, Direction direction) {
    ChangeThing cmd = new ChangeThing(name, ROBOT.get(direction));
    return createStep(Speed.FAST, cmd);

  }

  public static Step setMarks(int row, int col, int count) {
    ChangeCell cmd = new ChangeCell(new Position(row, col), createMarksAppearance(count));
    return createStep(Speed.FAST, cmd);

  }

  public static Step showAlert(String message) {
    Alert cmd = new Alert(message);
    return createStep(Speed.INSTANT, cmd);
  }

  public static Step printMessage(String message) {
    PrintMessage cmd = new PrintMessage(message);
    return createStep(Speed.INSTANT, cmd);
  }


  private static Step createStep(Speed speed, Command cmd) {
    Step step = new Step(speed);
    step.add(cmd);
    return step;
  }



  private static Appearance createMarksAppearance(int marks) {
    if (marks == 0) {
      return EMPTY;
    }
    return new TextAppearance(Color.WHITE, Color.BLACK, String.valueOf(marks));
  }

  private static Appearance createRobotAppearance(String label) {
    return new TextAppearance(Color.WHITE, Color.BLACK, label);
  }

}
