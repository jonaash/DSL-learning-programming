package JavaKarel.runtime;

/*Generated by MPS */


public class Robot {
  private Direction direction;
  private World world;
  private int col;
  private int row;

  public Robot() {
  }

  /*package*/ void instertToWorld(World world, int col, int row, Direction direction) {
    this.world = world;
    this.direction = direction;
    this.col = col;
    this.row = row;
  }


  public void turnLeft() {
    System.out.println("turn left");
    switch (direction) {
      case north:
        direction = Direction.west;
        break;
      case east:
        direction = Direction.north;
        break;
      case south:
        direction = Direction.east;
        break;
      case west:
        direction = Direction.south;
      default:
    }
  }

  public void moveKaja() {
    System.err.println("step");
    System.out.println("step");
    getCurrentCell().unsetRobot();
    switch (direction) {
      case north:
        row -= 1;
        break;
      case east:
        col += 1;
        break;
      case south:
        row += 1;
        break;
      case west:
        col -= 1;
      default:
    }
    getCurrentCell().setRobot(this);
  }

  public boolean isWall() {
    return getNextCell().isWall();
  }



  public void addMark() {
    getCurrentCell().addMark();
  }
  public void removeMark() {
    getCurrentCell().removeMark();
  }
  public boolean isEmpty() {
    return getCurrentCell().isEmpty();
  }
  public boolean isFull() {
    return getCurrentCell().isFull();
  }

  public boolean isHeading(Direction dir) {
    return this.direction == dir;
  }

  public Direction getDirection() {
    return direction;
  }

  protected Cell getCurrentCell() {
    return world.getCell(col, row);
  }

  protected Cell getNextCell() {
    int nextRow = row;
    int nextCol = col;
    switch (direction) {
      case north:
        nextRow -= 1;
        break;
      case east:
        nextCol += 1;
        break;
      case south:
        nextRow += 1;
        break;
      case west:
        nextCol -= 1;
      default:
    }
    return world.getCell(nextCol, nextRow);
  }

  public int getCol() {
    return col;
  }

  public int getRow() {
    return row;
  }


}
