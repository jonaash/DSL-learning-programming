package JavaKarel.runtime;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class Robot implements IRobot {
  private String name;
  private Direction direction;
  private World world;
  private int col;
  private int row;

  private RobotGui gui;

  public Robot(String name) {
    this.name = name;
  }

  /*package*/ void instertToWorld(World world, int row, int col, Direction direction) {
    this.world = world;
    this.direction = direction;
    this.row = row;
    this.col = col;
  }


  public void turnLeft() {
    if (LOG.isDebugEnabled()) {
      LOG.debug("turn left");
    }
    switch (direction) {
      case north:
        direction = Direction.west;
        break;
      case east:
        direction = Direction.north;
        break;
      case south:
        direction = Direction.east;
        break;
      case west:
        direction = Direction.south;
      default:
    }

    // change gui 
    if (gui != null) {
      gui.turnTo(direction);
    }
  }

  public void step() {
    if (LOG.isDebugEnabled()) {
      LOG.debug("step");
    }
    getCurrentCell().unsetRobot();
    switch (direction) {
      case north:
        row -= 1;
        break;
      case east:
        col += 1;
        break;
      case south:
        row += 1;
        break;
      case west:
        col -= 1;
      default:
    }
    getCurrentCell().setRobot(this);

    // change gui 
    if (gui != null) {
      gui.goToPosition(row, col);
    }

  }

  public boolean isWall() {
    return getNextCell().isWall();
  }

  public void addMark() {
    getCurrentCell().addMark();
    // change gui 
    if (gui != null) {
      gui.setMarks(row, col, getCurrentCell().getMarks());
    }

  }
  public void removeMark() {
    getCurrentCell().removeMark();
    // change gui 
    if (gui != null) {
      gui.setMarks(row, col, getCurrentCell().getMarks());
    }

  }
  public boolean isEmpty() {
    return getCurrentCell().isEmpty();
  }
  public boolean isFull() {
    return getCurrentCell().isFull();
  }

  public boolean isHeading(Direction dir) {
    return this.direction == dir;
  }

  public Direction getDirection() {
    return direction;
  }

  protected Cell getCurrentCell() {
    return world.getCell(row, col);
  }

  protected Cell getNextCell() {
    int nextRow = row;
    int nextCol = col;
    switch (direction) {
      case north:
        nextRow -= 1;
        break;
      case east:
        nextCol += 1;
        break;
      case south:
        nextRow += 1;
        break;
      case west:
        nextCol -= 1;
      default:
    }
    return world.getCell(nextCol, nextRow);
  }

  public int getCol() {
    return col;
  }

  public int getRow() {
    return row;
  }

  public String getName() {
    return name;
  }

  public void setGui(RobotGui gui) {
    this.gui = gui;
  }
  protected static Logger LOG = LogManager.getLogger(Robot.class);
}
